

----QUIT----(11 September 2022 19:10:09) CuisUniversity-5481.image priorSource: 2810882!

----STARTUP---- (11 September 2022 19:10:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5481.image!


----QUIT----(11 September 2022 19:10:10) CuisUniversity-5481.image priorSource: 7059465!

----STARTUP---- (29 September 2022 18:35:35) as /home/clinux01/Documentos/ISW1/linux64/CuisUniversity-5481.image!


----End fileIn of /home/clinux01/Documentos/ISW1/2022-2c-main/04-BabySteps/TDDBabyStepsGame.st----!

TDDBabyStepsGameRot13 start!

!classDefinition: #TDDBabyStepsRot13Test category: 'TDDBabyStepsGameRot13' stamp: 'CG 9/29/2022 18:36:45'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:37:06'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:37:06'!
ERROR!

!methodRemoval: TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:37:06'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:37:06'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:37:06'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:37:39'!
ERROR!
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:37:43'!
asRot13
	self shouldBeImplemented.! !
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:37:54' prior: 50556839!
asRot13

	^ $n! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:37:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:37:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:37:57'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:37:57'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:37:57'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:37:57'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:37:57'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:37:57'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:38:34' prior: 50556843!
asRot13

	self = $a ifTrue: [^ $n].
	^ $z! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:38:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:38:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:38:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:38:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:38:38'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:38:38'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:38:38'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:38:38'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:38:38'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:38:38'!
FAILURE!

----SNAPSHOT----(29 September 2022 18:38:58) CuisUniversity-5481.image priorSource: 7059698!
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:39:26' prior: 50556889!
asRot13

	self = $a ifTrue: [^ $n].
	self = $m ifTrue: [ ^ $z].
	^ $a! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:39:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:39:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:39:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:39:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:39:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:39:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:39:40'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:39:40'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:39:40'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:39:40'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:39:40'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:39:40'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:40:01' prior: 50556947!
asRot13

	self = $a ifTrue: [^ $n].
	self = $m ifTrue: [ ^ $z].
	self = $n ifTrue: [ ^ $a].
	^ $m! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:40:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:40:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:40:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:40:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:40:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:40:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:40:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:40:06'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:40:06'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:40:06'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:40:06'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:40:06'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:40:06'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:40:36' prior: 50557012!
asRot13

	self = $a ifTrue: [^ $n].
	self = $m ifTrue: [ ^ $z].
	self = $n ifTrue: [ ^ $a].
	self = $z ifTrue: [ ^ $m].
	! !
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:41:12' prior: 50557077!
asRot13

	self = $a ifTrue: [^ $n].
	self = $m ifTrue: [ ^ $z].
	self = $n ifTrue: [ ^ $a].
	self = $z ifTrue: [ ^ $m].
	self = $` ifTrue: [ ^ $`].! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:41:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:41:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:41:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:41:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:41:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:41:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:41:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:41:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:41:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:41:31'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:41:31'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:41:31'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:41:31'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:42:00' prior: 50557084!
asRot13

	self = $a ifTrue: [^ $n].
	self = $m ifTrue: [ ^ $z].
	self = $n ifTrue: [ ^ $a].
	self = $z ifTrue: [ ^ $m].
	self = $` ifTrue: [ ^ $`].
	^ false! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:42:07'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:42:07'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:42:07'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:42:07'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:42:07'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:42:07'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:42:33' prior: 50557149!
asRot13

	self = $a ifTrue: [^ $n].
	self = $m ifTrue: [ ^ $z].
	self = $n ifTrue: [ ^ $a].
	self = $z ifTrue: [ ^ $m].
	self = $` ifTrue: [ ^ $`].
	self = $` ifTrue: [ ^ $`].
	^ false! !
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:42:49' prior: 50557223!
asRot13

	self = $a ifTrue: [^ $n].
	self = $m ifTrue: [ ^ $z].
	self = $n ifTrue: [ ^ $a].
	self = $z ifTrue: [ ^ $m].
	self = $` ifTrue: [ ^ $`].
	self = ${ ifTrue: [ ^ ${].
	^ false! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:42:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:42:55'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:42:55'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:55'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:55'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:42:55'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:42:55'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:43:25' prior: 50557232!
asRot13

	self = $a ifTrue: [^ $n].
	self = $m ifTrue: [ ^ $z].
	self = $n ifTrue: [ ^ $a].
	self = $z ifTrue: [ ^ $m].
	self = $` ifTrue: [ ^ $`].
	self = ${ ifTrue: [ ^ ${].
	self = ${ ifTrue: [ ^ ${].
	self = ${ ifTrue: [ ^ ${].
	^ false! !
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:43:52' prior: 50557323!
asRot13

	self = $a ifTrue: [^ $n].
	self = $m ifTrue: [ ^ $z].
	self = $n ifTrue: [ ^ $a].
	self = $z ifTrue: [ ^ $m].
	self = $` ifTrue: [ ^ $`].
	self = ${ ifTrue: [ ^ ${].
	self = $A ifTrue: [ ^ $N].
	self = $M ifTrue: [ ^ $Z].
	^ false! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:43:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:43:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:43:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:43:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:57'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:43:57'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:57'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:57'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:43:57'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:43:57'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:46:58' prior: 50557334!
asRot13

	| letterNumber |
	
	letterNumber := self asciiValue - 97.
	
	(letterNumber between: 0 and: 25) ifTrue: [ ^ Character asciiValue: ((letterNumber + 13) mod: 26) + 97].

"	self = $a ifTrue: [^ $n].
	self = $m ifTrue: [ ^ $z].
	self = $n ifTrue: [ ^ $a].
	self = $z ifTrue: [ ^ $m].
	"
	self = $` ifTrue: [ ^ $`].
	self = ${ ifTrue: [ ^ ${].
	self = $A ifTrue: [ ^ $N].
	self = $M ifTrue: [ ^ $Z].
	^ false! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:47:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:47:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:47:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:47:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:47:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:47:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:47:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:47:03'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:47:03'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:48:06' prior: 50557436!
asRot13

	| letterNumber |
	
	letterNumber := self asciiValue - 97.
	
	(letterNumber between: 0 and: 25) ifTrue: [ ^ Character asciiValue: ((letterNumber + 13) mod: 26) + 97].

	letterNumber := self asciiValue - 65.
	
	(letterNumber between: 0 and: 25) ifTrue: [ ^ Character asciiValue: ((letterNumber + 13) mod: 26) + 65].


"	self = $a ifTrue: [^ $n].
	self = $m ifTrue: [ ^ $z].
	self = $n ifTrue: [ ^ $a].
	self = $z ifTrue: [ ^ $m].
	"
	self = $` ifTrue: [ ^ $`].
	self = ${ ifTrue: [ ^ ${].
"	self = $A ifTrue: [ ^ $N].
	self = $M ifTrue: [ ^ $Z].
"	^ false! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:48:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:48:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:48:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:48:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:48:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:48:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:48:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:48:09'!
PASSED!
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:48:29' prior: 50557490!
asRot13

	| letterNumber |
	
	letterNumber := self asciiValue - 97.
	
	(letterNumber between: 0 and: 25) ifTrue: [ ^ Character asciiValue: ((letterNumber + 13) mod: 26) + 97].

	letterNumber := self asciiValue - 65.
	
	(letterNumber between: 0 and: 25) ifTrue: [ ^ Character asciiValue: ((letterNumber + 13) mod: 26) + 65].

	self = $` ifTrue: [ ^ $`].
	self = ${ ifTrue: [ ^ ${].

	^ false! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:48:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:48:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:48:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:48:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:48:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:48:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:48:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:48:55'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:48:55'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:48:55'!
ERROR!

!methodRemoval: TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:48:55'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:48:55'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:48:55'!
ERROR!
!Character methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:49:21' prior: 50557544!
asRot13

	| letterNumber |
	
	letterNumber := self asciiValue - 97.
	
	(letterNumber between: 0 and: 25) ifTrue: [ ^ Character asciiValue: ((letterNumber + 13) mod: 26) + 97].

	letterNumber := self asciiValue - 65.
	
	(letterNumber between: 0 and: 25) ifTrue: [ ^ Character asciiValue: ((letterNumber + 13) mod: 26) + 65].! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:49:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:49:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:49:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:49:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:49:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:49:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:49:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:49:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:49:24'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:49:24'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:49:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:49:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:49:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:49:34'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:49:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:49:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:49:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:49:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:49:50'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:51:59'!
asRot13
	self shouldBeImplemented.! !
!String methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:52:11' prior: 50557706!
asRot13
	
	^ ''! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:52:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:52:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:52:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:52:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:52:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:52:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:52:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:52:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:52:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:52:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:52:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:52:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:52:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:52:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:52:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:52:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:52:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:52:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:52:17'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:52:17'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 18:52:17'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 18:52:17'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:52:17'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 18:52:17'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:56:12' prior: 50557710!
asRot13

	| character |
	
	character := self.

	^ String ! !
!String methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:56:58' prior: 50557826!
asRot13

	| character |
	
	character := self at: 1.

	^ String with: (character asRot13)! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:57:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:57:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:57:11'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 18:57:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:57:11'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:57:51' prior: 50557831!
asRot13

	| character |
	
	self isEmpty ifTrue: [ ^ self ].
	
	character := self at: 1.

	^ String with: (character asRot13)! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:57:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:57:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:57:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 18:57:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:57:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:57:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:57:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:57:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 18:57:57'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:57:57'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CG 9/29/2022 18:57:57'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CG 9/29/2022 18:57:57'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 18:57:57'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CG 9/29/2022 18:57:57'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'CG 9/29/2022 18:59:44' prior: 50557881!
asRot13

	| character |
	
	self isEmpty ifTrue: [ ^ self ].
	
	self size = 1 ifTrue: [
	
	character := self at: 1.

	^ String with: (character asRot13)].

	^ String with: ((self at: 1) asRot13) with: ((self at: 2) asRot13)! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:59:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:59:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:59:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:59:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 18:59:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 18:59:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 18:59:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 18:59:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 18:59:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 18:59:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CG 9/29/2022 18:59:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:00:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:00:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:00:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:00:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 19:00:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 19:00:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:00:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:00:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 19:00:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 19:00:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CG 9/29/2022 19:00:02'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 19:00:02'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CG 9/29/2022 19:00:02'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CG 9/29/2022 19:00:02'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 19:00:02'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CG 9/29/2022 19:00:02'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'CG 9/29/2022 19:02:05' prior: 50557993!
asRot13

	| rotString |

	rotString := String new.

	self do: [ :aCharacter | rotString add: (aCharacter asRot13)]! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 19:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 19:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 19:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 19:02:07'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CG 9/29/2022 19:02:07'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CG 9/29/2022 19:02:07'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'CG 9/29/2022 19:02:31' prior: 50558117!
asRot13

	| rotString |

	rotString := String new.

	self do: [ :aCharacter | rotString add: (aCharacter asRot13)].
	
	^ rotString ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:02:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:02:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:02:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:02:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 19:02:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 19:02:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:02:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:02:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 19:02:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 19:02:33'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CG 9/29/2022 19:02:33'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CG 9/29/2022 19:02:33'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 19:03:37'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'CG 9/29/2022 19:04:49' prior: 50558171!
asRot13

	| rotString |

	rotString := String new.

	self do: [ :aCharacter | rotString , (aCharacter asRot13) asString].
	
	^ rotString ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:04:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:04:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:04:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:04:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 19:04:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 19:04:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:04:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:04:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 19:04:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 19:04:51'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CG 9/29/2022 19:04:51'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CG 9/29/2022 19:04:51'!
FAILURE!

'' , 'a'!
!String methodsFor: '*Rot13' stamp: 'CG 9/29/2022 19:06:29' prior: 50558229!
asRot13

	| rotString |

	rotString := String new.

	self do: [ :aCharacter | rotString , ((aCharacter asRot13) asString)].
	
	^ rotString ! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 19:06:32'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:06:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:06:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:06:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:06:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 19:06:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 19:06:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:06:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:06:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 19:06:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 19:06:38'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CG 9/29/2022 19:06:38'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CG 9/29/2022 19:06:38'!
FAILURE!

aCharacter asRot13!

((aCharacter asRot13) asString)!

rotString , ((aCharacter asRot13) asString)!
!String methodsFor: '*Rot13' stamp: 'CG 9/29/2022 19:08:00' prior: 50558284!
asRot13

	| rotString |

	rotString := String new.

	self do: [ :aCharacter | rotString := rotString , ((aCharacter asRot13) asString)].
	
	^ rotString ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:08:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:08:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:08:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:08:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 19:08:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 19:08:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:08:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:08:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 19:08:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 19:08:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CG 9/29/2022 19:08:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CG 9/29/2022 19:08:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:08:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:08:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:08:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:08:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'CG 9/29/2022 19:08:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'CG 9/29/2022 19:08:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'CG 9/29/2022 19:08:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'CG 9/29/2022 19:08:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'CG 9/29/2022 19:08:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'CG 9/29/2022 19:08:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'CG 9/29/2022 19:08:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'CG 9/29/2022 19:08:05'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'CG 9/29/2022 19:08:05'!
testExtraToCheckGeneralizationOnKata
		
	self assert: 'Ju3er j3 4e3 t01at j3 q0ag a3rq e04q$...' equals: 'Wh3re w3 4r3 g01ng w3 d0nt n3ed r04d$...' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'CG 9/29/2022 19:08:05'!
PASSED!

----SNAPSHOT----(29 September 2022 19:08:30) CuisUniversity-5481.image priorSource: 7209372!

TDDBabyStepsGamePrimeFactors start!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'CG 9/29/2022 19:09:03'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:10:43'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:10:43'!
ERROR!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:10:43'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:10:43'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:10:43'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:12:15'!
ERROR!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:12:39'!
factorize
	self shouldBeImplemented.! !
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:12:58' prior: 50558500!
factorize
	
	^ Bag new! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:12:59'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:12:59'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:13:08'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:13:08'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:13:08'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:13:08'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:13:08'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:13:08'!
FAILURE!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:14:17' prior: 50558505!
factorize
	
	self = 1 ifTrue: [	^ Bag new].
	^ Bag with: 2! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:14:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:14:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:14:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:14:23'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:14:23'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:14:23'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:14:23'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:14:23'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:14:23'!
FAILURE!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:14:59' prior: 50558546!
factorize
	
	self = 1 ifTrue: [	^ Bag new].
	self = 2 ifTrue: [^ Bag with: 2].
	^ Bag with: 3! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:15:02'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:15:02'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:15:02'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:15:05'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:15:05'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:15:05'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:15:05'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:15:05'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:15:05'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:15:05'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:15:05'!
FAILURE!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:16:02' prior: 50558593!
factorize
	
	self = 1 ifTrue: [	^ Bag new].
	self = 2 ifTrue: [^ Bag with: 2].
	self = 3 ifTrue: [^ Bag with: 3].
	^ Bag with: 2 with: 2! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:16:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:16:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:16:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:16:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:16:09'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:16:09'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:16:09'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:16:09'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:16:09'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:16:09'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:16:09'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:16:09'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:16:09'!
FAILURE!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:16:52' prior: 50558652!
factorize
	
	self = 1 ifTrue: [	^ Bag new].
	self = 2 ifTrue: [^ Bag with: 2].
	self = 3 ifTrue: [^ Bag with: 3].
	
	
	
	^ Bag with: 2 with: 2! !
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:17:36' prior: 50558724!
factorize
	
	self = 1 ifTrue: [	^ Bag new].
	self = 2 ifTrue: [^ Bag with: 2].
	self = 3 ifTrue: [^ Bag with: 3].
	
	
	
	^ Bag with: 2 with: 2! !
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:18:40' prior: 50558732!
factorize
	
	self = 1 ifTrue: [	^ Bag new].
	self = 2 ifTrue: [^ Bag with: 2].
	self = 3 ifTrue: [^ Bag with: 3].
	
	^ (self / 2) factorize addAll: (self / 2) factorize.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:18:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:18:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:18:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:18:43'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:18:43'!
FAILURE!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:17:36' prior: 50558740!
factorize
	
	self = 1 ifTrue: [	^ Bag new].
	self = 2 ifTrue: [^ Bag with: 2].
	self = 3 ifTrue: [^ Bag with: 3].
	
	
	
	^ Bag with: 2 with: 2! !
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:20:41' prior: 50558769!
factorize
	
	self = 1 ifTrue: [	^ Bag new].
	self = 2 ifTrue: [^ Bag with: 2].
	self = 3 ifTrue: [^ Bag with: 3].
	self = 4 ifTrue: [^ Bag with: 2 with: 2].
	^ Bag with: 2 with: 2 with: 2! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:20:48'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:20:48'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:20:48'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:20:48'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:20:48'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:20:50'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:20:50'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:20:50'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:20:50'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:20:50'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:20:50'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:20:50'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:20:50'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:20:50'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:20:50'!
FAILURE!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:25:36' prior: 50558777!
factorize
	
	self = 1 ifTrue: [	^ Bag new].
	self = 2 ifTrue: [^ Bag with: 2].
	self = 3 ifTrue: [^ Bag with: 3].
	
	(self isDivisibleBy: 2) ifTrue: [^ (2 factorize) addAll: ((self / 2) factorize)].
	(self isDivisibleBy: 3) ifTrue: [^ (3 factorize) addAll: ((self / 3) factorize)].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:25:40'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:25:40'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:25:40'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:25:40'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:25:40'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:25:40'!
FAILURE!

(2 factorize)!

(2 factorize) addAll: ((self / 2) factorize)!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:27:38' prior: 50558862!
factorize
	
	self = 1 ifTrue: [	^ Bag new].

	(self isDivisibleBy: 2) ifTrue: [^ ((self / 2) factorize) add: 2 ].
	(self isDivisibleBy: 3) ifTrue: [^ ((self / 3) factorize) addAll: 3 ].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:27:40'!
ERROR!

((self / 2) factorize)!

((self / 2) factorize) add: 2!

x := Bag new!

x := Bag new!

x add: 1!

x!

x!

x := Bag new!

x!

x add: 1 withOccurrences: 1!

x!

x add: 1 withOccurrences: 1!

x!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:31:53' prior: 50558902!
factorize
	
	self = 1 ifTrue: [	^ Bag new].

	(self isDivisibleBy: 2) ifTrue: [^ ((self / 2) factorize) add: 2 withOccurrences: 1 ].
	(self isDivisibleBy: 3) ifTrue: [^ ((self / 3) factorize) add: 3 withOccurrences: 1 ].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:31:55'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:31:55'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:31:55'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:31:55'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:31:55'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:31:55'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:32:24'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:32:24'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:32:24'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:32:24'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:32:24'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:32:24'!
ERROR!

((self / 2) factorize) add: 2 withOccurrences: 1!

(self / 2) factorize!

((self / 2) factorize) add: 2 withOccurrences: 1!

((self / 2) factorize)!

((self / 2) factorize) add: 2 withOccurrences: 1!

((self / 2) factorize) add:2!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:37:32' prior: 50558922!
factorize
	
	self = 1 ifTrue: [	^ Bag new].

	(self isDivisibleBy: 2) ifTrue: [ | bag |bag := ((self / 2) factorize). bag add: 2 withOccurrences: 1 ].
	(self isDivisibleBy: 3) ifTrue: [^ ((self / 3) factorize) add: 3 withOccurrences: 1 ].! !
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:37:56' prior: 50558990!
factorize
	
	self = 1 ifTrue: [	^ Bag new].

	(self isDivisibleBy: 2) ifTrue: [ | bag | bag := ((self / 2) factorize). bag add: 2 withOccurrences: 1 ].
	(self isDivisibleBy: 3) ifTrue: [ | bag | bag := ((self / 3) factorize). bag add: 3 withOccurrences: 1 ].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:38:04'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:38:04'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:38:04'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:38:04'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:38:04'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:38:04'!
ERROR!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:48:36' prior: 50559001!
factorize
	
	| divisor bag number |

	number := self.
	bag := Bag new.

	divisor := 2.
	divisor > 1
		whileTrue: [
			(number isDivisibleBy: divisor)
				ifTrue: [ bag add: divisor. number := number / divisor ].
				divisor := divisor + 1
			].
		
	^ bag! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:48:39'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:48:39'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:48:39'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:48:39'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:48:39'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:48:39'!
ERROR!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:49:19' prior: 50559038!
factorize
	
	| divisor bag number |

	number := self.
	bag := Bag new.

	divisor := 2.
	divisor > 1
		whileTrue: [
			(number isDivisibleBy: divisor)
				ifTrue: [ bag add: divisor. number := number / divisor ]
				ifFalse: [ divisor := divisor + 1 ]
			].
		
	^ bag! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:49:22'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:49:22'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:49:22'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:49:22'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:49:22'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:49:22'!
ERROR!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:49:42' prior: 50559074!
factorize
	
	| divisor bag number |

	number := self.
	bag := Bag new.

	divisor := 2.
	divisor > 1
		whileTrue: [
			(number isDivisibleBy: divisor)
				ifTrue: [ bag add: divisor withOccurrences: 1. number := number / divisor ]
				ifFalse: [ divisor := divisor + 1 ]
			].
		
	^ bag! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:49:44'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:49:44'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:49:44'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:49:44'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:49:44'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:49:44'!
ERROR!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:50:39' prior: 50559111!
factorize
	
	| divisor bag number |

	bag := Bag new.

	number := self.

	divisor := 2.
	number > 1
		whileTrue: [
			(number isDivisibleBy: divisor)
				ifTrue: [ bag add: divisor withOccurrences: 1. number := number / divisor ]
				ifFalse: [ divisor := divisor + 1 ]
			].
		
	^ bag! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:50:41'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:50:41'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:50:41'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:50:41'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:50:41'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:50:41'!
ERROR!

x := Bag new!

x add: 1; add: 1!

x add: 1; add: 1!

x!

x := Bag new!

x add: 1; add: 1!

x !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:52:17'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:52:17'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:52:17'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:52:17'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:52:17'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:52:17'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:52:50'!
ERROR!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:53:03' prior: 50559148!
factorize
	
	| divisor bag number |

	bag := Bag new.

	number := self.

	divisor := 2.
	(number > 1)
		whileTrue: [
			(number isDivisibleBy: divisor)
				ifTrue: [ bag add: divisor withOccurrences: 1. number := number / divisor ]
				ifFalse: [ divisor := divisor + 1 ]
			].
		
	^ bag! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:53:06'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:53:06'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:53:06'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:53:06'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:53:06'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:53:06'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:53:25'!
ERROR!

number!
!SmallInteger methodsFor: '*PrimeFactors' stamp: 'CG 9/29/2022 19:53:58' prior: 50559217!
factorize
	
	| divisor bag number |

	bag := Bag new.

	number := self.

	divisor := 2.
	[number > 1]
		whileTrue: [
			(number isDivisibleBy: divisor)
				ifTrue: [ bag add: divisor withOccurrences: 1. number := number / divisor ]
				ifFalse: [ divisor := divisor + 1 ]
			].
		
	^ bag! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:53:59'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:54:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:54:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:54:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:54:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:54:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:54:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'CG 9/29/2022 19:54:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:54:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'CG 9/29/2022 19:54:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'CG 9/29/2022 19:54:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'CG 9/29/2022 19:54:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'CG 9/29/2022 19:54:13'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 19:54:13'!
testExtraToCheckGeneralizationOnKata
	
	self assert: (Bag with: 2 with: 2 with: 3 with: 3 with: 5 with: 13) equals: (2*2*3*3*5*13) factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'CG 9/29/2022 19:54:13'!
PASSED!

----SNAPSHOT----(29 September 2022 19:55:01) CuisUniversity-5481.image priorSource: 7257904!

TDDBabyStepsGameAnagrams start!

!classDefinition: #TDDBabyStepsAnagramsTest category: 'TDDBabyStepsGameAnagrams' stamp: 'CG 9/29/2022 19:55:31'!
TestCase subclass: #TDDBabyStepsAnagramsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAnagrams'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 20:24:44'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:24:44'!
ERROR!

!methodRemoval: TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:24:44'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 20:24:44'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:24:44'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:24:52'!
ERROR!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:25:07'!
anagrams
	self shouldBeImplemented.! !
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:25:43' prior: 50559382!
anagrams

	^ Set with: ''! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:25:57'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:25:57'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:26:35'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 20:26:35'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:26:35'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:26:35'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 20:26:35'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:26:35'!
FAILURE!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:27:35' prior: 50559386!
anagrams

	self ifEmpty: [^ Set with: ''].
	^ Set with: 'a'! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:27:39'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:27:42'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:27:42'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:27:44'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:27:44'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 20:27:44'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:27:44'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:27:44'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 20:27:44'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:27:44'!
FAILURE!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:28:11' prior: 50559435!
anagrams

	^ self! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:28:17'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:28:17'!
FAILURE!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:28:32' prior: 50559495!
anagrams

	^ Set with: self! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:28:37'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:28:38'!
PASSED!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:32:18' prior: 50559507!
anagrams

	self size = 1 ifTrue: [^ Set with: self].
	^ Set with: self with: 'ba'! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:32:20'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:32:20'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:32:20'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:32:20'!
FAILURE!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:32:36' prior: 50559520!
anagrams

	self size < 2 ifTrue: [^ Set with: self].
	^ Set with: self with: 'ba'! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:32:39'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:32:39'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:32:39'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:32:41'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:32:41'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:32:41'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 20:32:41'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 20:32:41'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 20:32:41'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 20:32:41'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 20:32:41'!
FAILURE!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:36:38' prior: 50559544!
anagrams

	| anagrams |
	
	anagrams := Set with: self.

	self size < 2 ifTrue: [^ anagrams].
	self size = 2 ifTrue: [^ anagrams add: ((self at: 2) , (self at: 1))].

	anagrams add: ((self at: 1) , (self at: 3) , (self at: 2)).
	anagrams add: ((self at: 2) , (self at: 3) , (self at: 1)).
	anagrams add: ((self at: 2) , (self at: 1) , (self at: 3)).
	anagrams add: ((self at: 3) , (self at: 1) , (self at: 2)).
	anagrams add: ((self at: 3) , (self at: 2) , (self at: 1)).! !
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:36:43' prior: 50559624!
anagrams

	| anagrams |
	
	anagrams := Set with: self.

	self size < 2 ifTrue: [^ anagrams].
	self size = 2 ifTrue: [^ anagrams add: ((self at: 2) , (self at: 1))].

	anagrams add: ((self at: 1) , (self at: 3) , (self at: 2)).
	anagrams add: ((self at: 2) , (self at: 3) , (self at: 1)).
	anagrams add: ((self at: 2) , (self at: 1) , (self at: 3)).
	anagrams add: ((self at: 3) , (self at: 1) , (self at: 2)).
	anagrams add: ((self at: 3) , (self at: 2) , (self at: 1)).
	
	^ anagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:36:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:36:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:36:45'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 20:36:45'!
ERROR!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:37:21' prior: 50559642!
anagrams

	| anagrams |
	
	anagrams := Set with: self.

	self size < 2 ifTrue: [^ anagrams].
	self size = 2 ifTrue: [^ anagrams add: (((self at: 2) , (self at: 1)))].

	anagrams add: ((self at: 1) , (self at: 3) , (self at: 2)).
	anagrams add: ((self at: 2) , (self at: 3) , (self at: 1)).
	anagrams add: ((self at: 2) , (self at: 1) , (self at: 3)).
	anagrams add: ((self at: 3) , (self at: 1) , (self at: 2)).
	anagrams add: ((self at: 3) , (self at: 2) , (self at: 1)).
	
	^ anagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:37:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:37:25'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:37:25'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 20:37:25'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:37:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:37:52'!
ERROR!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:38:35' prior: 50559678!
anagrams

	| anagrams |
	
	anagrams := Set with: self.

	self size < 2 ifTrue: [^ anagrams].
	self size = 2 ifTrue: [^ anagrams add: ((self at: 2) asString , (self at: 1) asString)].

	anagrams add: ((self at: 1) , (self at: 3) , (self at: 2)).
	anagrams add: ((self at: 2) , (self at: 3) , (self at: 1)).
	anagrams add: ((self at: 2) , (self at: 1) , (self at: 3)).
	anagrams add: ((self at: 3) , (self at: 1) , (self at: 2)).
	anagrams add: ((self at: 3) , (self at: 2) , (self at: 1)).
	
	^ anagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:38:39'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:38:39'!
FAILURE!

((self at: 2) asString , (self at: 1) asString)!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:39:42'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:39:47'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:39:47'!
FAILURE!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:40:53' prior: 50559724!
anagrams

	| anagrams |
	
	anagrams := Set with: self.

	self size < 2 ifTrue: [^ anagrams].
	self size = 2 ifTrue: [ anagrams add: ((self at: 2) asString , (self at: 1) asString). ^ anagrams].

	anagrams add: ((self at: 1) , (self at: 3) , (self at: 2)).
	anagrams add: ((self at: 2) , (self at: 3) , (self at: 1)).
	anagrams add: ((self at: 2) , (self at: 1) , (self at: 3)).
	anagrams add: ((self at: 3) , (self at: 1) , (self at: 2)).
	anagrams add: ((self at: 3) , (self at: 2) , (self at: 1)).
	
	^ anagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:40:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:40:59'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:40:59'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:40:59'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 20:40:59'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 20:40:59'!
ERROR!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:41:42' prior: 50559768!
anagrams

	| anagrams |
	
	anagrams := Set with: self.

	self size < 2 ifTrue: [^ anagrams].
	self size = 2 ifTrue: [ anagrams add: ((self at: 2) asString , (self at: 1) asString). ^ anagrams].

	anagrams add: ((self at: 1) asString , (self at: 3) asString , (self at: 2) asString).
	anagrams add: ((self at: 2) asString , (self at: 3) asString , (self at: 1) asString).
	anagrams add: ((self at: 2) asString , (self at: 1) asString , (self at: 3) asString).
	anagrams add: ((self at: 3) asString , (self at: 1) asString , (self at: 2) asString).
	anagrams add: ((self at: 3) asString , (self at: 2) asString , (self at: 1) asString).
	
	^ anagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:41:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:41:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:41:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 20:41:45'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:41:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:41:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:41:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 20:41:47'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 20:41:47'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 20:41:47'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 20:41:47'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 20:41:47'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 20:41:47'!
FAILURE!

----End fileIn of /home/clinux01/Documentos/ISW1/linux64/Packages/TerseGuide.pck.st----!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:49:08' prior: 50559814!
anagrams

	| anagrams |
	
	anagrams := Set with: self.
	
	self do: [ :character | 
		anagrams do: [ :string | 
			1 to: string size do: [ :index |
				string at: index put: character ] ] ].
	
	^ anagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 20:49:12'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 20:49:12'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 20:49:12'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 20:49:12'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 20:49:12'!
FAILURE!

string := 'hla'!

string at: 2 put: $o!

string!

string := 'hola'!

string2 := string copyFrom: 1 to: 2!

string2!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 20:59:45' prior: 50562861!
anagrams

	| anagrams |
	
	anagrams := Set with: self.
	
	self do: [ :character | 
		anagrams do: [ :string | 
			1 to: string size do: [ :index |
				anagrams add: (string copyFrom: 1 to: index) , character asString , (string copyFrom: index to: string size) ] ] ].
	
	^ anagrams ! !
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:01:57' prior: 50562897!
anagrams

	| anagrams |
	
	anagrams := Set with: self.
	
	self do: [ :character | 
		anagrams do: [ :string | 
			1 to: string size do: [ :index |
				(string copyFrom: 1 to: index) , character asString , (string copyFrom: index to: string size) ] ] ].
	
	^ anagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:02:00'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:02:00'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:02:00'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:02:00'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:02:00'!
FAILURE!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:03:04' prior: 50562909!
anagrams

	| anagrams |
	
	anagrams := Set with: self.
	
	self do: [ :character | 
		anagrams := anagrams collect: [ :string | 
			1 to: string size do: [ :index |
				(string copyFrom: 1 to: index) , character asString , (string copyFrom: index to: string size) ] ] ].
	
	^ anagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:03:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:03:07'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:03:07'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:03:07'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:03:07'!
ERROR!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:05:09' prior: 50562944!
anagrams

	| anagrams |
	
	anagrams := Set with: self.
	
	self do: [ :character | 
		anagrams := anagrams collect: [ :string | 
			1 to: string size do: [ :index |
				^ (string copyFrom: 1 to: index) , character asString , (string copyFrom: index to: string size) ] ] ].
	
	^ anagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:05:13'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:05:13'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:05:13'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:05:13'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:05:13'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:05:18'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:05:18'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:05:51'!
FAILURE!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:10:37' prior: 50562979!
anagrams

	| anagrams |
	
	anagrams := Set with: self.
	
	self do: [ :character | 
		anagrams := anagrams collect: [ :string |
			| newAnagrams |
			1 to: string size do: [ :index |
				newAnagrams add: ((string copyFrom: 1 to: index) , character asString , (string copyFrom: index to: string size)) ].
			newAnagrams ] ].
	
	^ anagrams ! !
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:10:49' prior: 50563028!
anagrams

	| anagrams |
	
	anagrams := Set with: self.
	
	self do: [ :character | 
		anagrams := anagrams collect: [ :string |
			| newAnagrams |
			1 to: string size do: [ :index |
				newAnagrams add: ((string copyFrom: 1 to: index) , character asString , (string copyFrom: index to: string size)) ].
			^ newAnagrams ] ].
	
	^ anagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:11:00'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:11:00'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:11:00'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:11:00'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:11:00'!
ERROR!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:21:36' prior: 50563042!
anagrams

	| anagrams letter |
	
	anagrams := (self copyFrom: 1 to: (self size - 1)) anagrams.

	letter := self last.	
	
	anagrams collect: [ :anagram | 
		1 to: anagram size do: [ :index |
			(anagram copyFrom: 1 to: index) , letter asString , (anagram copyFrom: index to: anagram size)]].
	
	^ anagrams ! !
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:22:16' prior: 50563079!
anagrams

	| anagrams letter |
	
	self size <= 1 ifTrue: [^ self].
	
	anagrams := (self copyFrom: 1 to: (self size - 1)) anagrams.

	letter := self last.	
	
	anagrams collect: [ :anagram | 
		1 to: anagram size do: [ :index |
			(anagram copyFrom: 1 to: index) , letter asString , (anagram copyFrom: index to: anagram size)]].
	
	^ anagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:22:20'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:22:20'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:22:20'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:22:20'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:22:20'!
ERROR!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:22:39' prior: 50563092!
anagrams

	| anagrams letter |
	
	self size <= 1 ifTrue: [^ Set with: self].
	
	anagrams := (self copyFrom: 1 to: (self size - 1)) anagrams.

	letter := self last.	
	
	anagrams collect: [ :anagram | 
		1 to: anagram size do: [ :index |
			(anagram copyFrom: 1 to: index) , letter asString , (anagram copyFrom: index to: anagram size)]].
	
	^ anagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:22:42'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:22:42'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:22:42'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:22:42'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:22:42'!
FAILURE!

self copyFrom: 1 to: (self size - 1)!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:25:54' prior: 50563129!
anagrams

	| anagrams letter |
	
	self size <= 1 ifTrue: [^ Set with: self].
	
	anagrams := (self copyFrom: 1 to: (self size - 1)) anagrams.

	letter := self last.	
	
	anagrams do: [ :anagram | 
		| newAnagrams |
		newAnagrams := Set new.
		1 to: anagram size do: [ :index |
			newAnagrams add: (anagram copyFrom: 1 to: index) , letter asString , (anagram copyFrom: index to: anagram size)]].
	
	^ anagrams ! !
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:26:34' prior: 50563168!
anagrams

	| anagrams letter newAnagrams |
	
	self size <= 1 ifTrue: [^ Set with: self].
	
	anagrams := (self copyFrom: 1 to: (self size - 1)) anagrams.

	letter := self last.	

	newAnagrams := Set new.

	anagrams do: [ :anagram | 
		1 to: anagram size do: [ :index |
			newAnagrams add: (anagram copyFrom: 1 to: index) , letter asString , (anagram copyFrom: index to: anagram size)]].
	
	^ newAnagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:26:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:26:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:26:36'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:26:36'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:26:36'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:26:46'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:26:46'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:27:10'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:27:10'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:27:23'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:27:23'!
FAILURE!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:27:48' prior: 50563184!
anagrams

	| anagrams letter newAnagrams |
	
	self size <= 1 ifTrue: [^ Set with: self].
	
	anagrams := (self copyFrom: 1 to: (self size - 1)) anagrams.

	letter := self last.	

	newAnagrams := Set new.

	anagrams do: [ :anagram | 
		1 to: anagram size do: [ :index |
			newAnagrams add: ((anagram copyFrom: 1 to: index) , letter asString , (anagram copyFrom: index to: anagram size))]].
	
	^ newAnagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:27:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:27:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:27:51'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:27:51'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:27:51'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:27:56'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:27:56'!
FAILURE!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 21:28:17' prior: 50559483!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'tt') equals: 'ab' anagrams
	! !
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 21:28:22' prior: 50563300!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'sd') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:28:23'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:28:23'!
FAILURE!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 21:28:31' prior: 50563308!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:28:32'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:28:32'!
FAILURE!

----SNAPSHOT----(29 September 2022 21:28:41) CuisUniversity-5481.image priorSource: 7285896!

(self copyFrom: 1 to: (self size - 1))!

string2 := string copyFrom: 1 to: 1!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:32:54' prior: 50563251!
anagrams

	| anagrams letter newAnagrams |
	
	self size <= 1 ifTrue: [^ Set with: self].
	
	anagrams := (self copyFrom: 1 to: (self size - 1)) anagrams.

	letter := self last.	

	newAnagrams := Set new.

	anagrams do: [ :anagram | 
		2 to: anagram size - 1 do: [ :index |
			newAnagrams add: ((anagram copyFrom: 1 to: index) , letter asString , (anagram copyFrom: index to: anagram size))].
		newAnagrams add: (anagram , letter asString); add: (letter asString , anagram) ].
	
	^ newAnagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:32:56'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:32:59'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:32:59'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:32:59'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:32:59'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:32:59'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:33:07'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:33:07'!
FAILURE!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:33:48' prior: 50563347!
anagrams

	| anagrams letter newAnagrams |
	
	self size <= 1 ifTrue: [^ Set with: self].
	
	anagrams := (self copyFrom: 1 to: (self size - 1)) anagrams.

	letter := self last.	

	newAnagrams := Set new.

	anagrams do: [ :anagram | 
		2 to: (anagram size - 1) do: [ :index |
			newAnagrams add: ((anagram copyFrom: 1 to: index) , letter asString , (anagram copyFrom: index to: anagram size))].
		newAnagrams add: (anagram , letter asString); add: (letter asString , anagram) ].
	
	^ newAnagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:33:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:33:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:33:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:33:51'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:33:51'!
FAILURE!

(self copyFrom: 1 to: (self size - 1))!

----SNAPSHOT----(29 September 2022 21:36:15) CuisUniversity-5481.image priorSource: 7414103!

----QUIT----(29 September 2022 21:36:37) CuisUniversity-5481.image priorSource: 7417440!

----STARTUP---- (29 September 2022 21:36:46) as /home/clinux01/Documentos/ISW1/linux64/CuisUniversity-5481.image!

!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 21:38:15' prior: 50559607!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| a anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.
	a := 'abc'.
	self assert: anagrams equals: a anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:38:39'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:38:39'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:39:12'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 21:39:33' prior: 50563456!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:39:51'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:39:51'!
FAILURE!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:45:44' prior: 50563403!
anagrams

	| anagrams letter newAnagrams |
	
	self size <= 1 ifTrue: [^ Set with: self].
	
	anagrams := (self copyFrom: 1 to: (self size - 1)) anagrams.

	letter := self last.	

	newAnagrams := Set new.

	anagrams do: [ :anagram | 
		anagram size = 2 ifTrue: [newAnagrams add: (anagram first asString , letter asString , anagram last asString)].
		2 to: (anagram size - 1) do: [ :index |
			newAnagrams add: ((anagram copyFrom: 1 to: index) , letter asString , (anagram copyFrom: index to: anagram size))].
		newAnagrams add: (anagram , letter asString); add: (letter asString , anagram) ].
	
	^ newAnagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:45:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:45:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:45:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:45:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:45:47'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:45:47'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:45:56'!
PASSED!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:47:35' prior: 50563504!
anagrams

	| anagrams letter newAnagrams |
	
	self size <= 1 ifTrue: [^ Set with: self].
	
	anagrams := (self copyFrom: 1 to: (self size - 1)) anagrams.

	letter := self last.	

	newAnagrams := Set new.

	anagrams do: [ :anagram | 
		anagram size = 2 ifTrue: [newAnagrams add: (anagram first asString , letter asString , anagram last asString)].
		2 to: (anagram size - 1) do: [ :index |
			newAnagrams add: ((anagram copyFrom: 1 to: index) , letter asString , (anagram copyFrom: index + 1 to: anagram size))].
		newAnagrams add: (anagram , letter asString); add: (letter asString , anagram) ].
	
	^ newAnagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:47:39'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:47:39'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:47:39'!
FAILURE!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 21:48:42' prior: 50559918!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams palabra |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	palabra := 'abcd'.

	self assert: anagrams equals: palabra anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:48:45'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:48:45'!
FAILURE!
!String methodsFor: '*Anagrams' stamp: 'CG 9/29/2022 21:52:22' prior: 50563559!
anagrams

	| anagrams letter newAnagrams |
	
	self size <= 1 ifTrue: [^ Set with: self].
	
	anagrams := (self copyFrom: 1 to: (self size - 1)) anagrams.

	letter := self last.	

	newAnagrams := Set new.

	anagrams do: [ :anagram | 
		anagram size = 2 ifTrue: [newAnagrams add: (anagram first asString , letter asString , anagram last asString)].
		1 to: (anagram size) do: [ :index |
			newAnagrams add: ((anagram copyFrom: 1 to: index) , letter asString , (anagram copyFrom: index + 1 to: anagram size))].
		newAnagrams add: (anagram , letter asString); add: (letter asString , anagram) ].
	
	^ newAnagrams ! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:52:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:52:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:52:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:52:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:52:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:52:28'!
PASSED!

----SNAPSHOT----(29 September 2022 21:53:01) CuisUniversity-5481.image priorSource: 7417534!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'CG 9/29/2022 21:53:11'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'CG 9/29/2022 21:53:11'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'CG 9/29/2022 21:53:11'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'CG 9/29/2022 21:53:11'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'CG 9/29/2022 21:53:11'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'CG 9/29/2022 21:53:11'!
testExtraToCheckGeneralizationOnKata

	self assert: 40320 equals:`'abcdefgh' anagrams` size.
	
	self assert: (`'abcdefgh' anagrams`) includes: 'cghdbeaf'.
	
	self assert: 10080 equals: `'abcdefab' anagrams` size
	! !

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'CG 9/29/2022 21:53:12'!
PASSED!

----SNAPSHOT----(29 September 2022 21:53:44) CuisUniversity-5481.image priorSource: 7425223!

----QUIT----(29 September 2022 22:08:13) CuisUniversity-5481.image priorSource: 7426475!
| game |
game  := TDDBabyStepsGameCuentaBancaria start.
game openHelp.
game openDefinition.
game next.!
| game |
game  := TDDBabyStepsGameContador start.
game openHelp.
game openDefinition.
game next.!
| game |
game  := TDDBabyStepsGameCuentaBancaria start.
game openHelp.
game openDefinition.
game next.!
| game |
game  := TDDBabyStepsGameDemo start.
game openHelp.
game openDefinition.
game next.!
| game |
game  := TDDBabyStepsGameCuentaBancaria start.
game openHelp.
game openDefinition.
game next.!
| game |
game  := TDDBabyStepsGameCuentaBancaria start.
game openHelp.
game openDefinition.
game next.!

----STARTUP---- (29 September 2022 22:08:28) as /home/clinux01/Documentos/ISW1/linux64/CuisUniversity-5481.image!


----QUIT----(29 September 2022 22:08:54) CuisUniversity-5481.image priorSource: 7426569!